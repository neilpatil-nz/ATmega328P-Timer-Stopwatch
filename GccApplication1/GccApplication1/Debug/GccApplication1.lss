
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000374  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000003e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000733  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060d  00000000  00000000  00000bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000020e  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b0  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000047  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000017f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>
#include <stdint.h>

static volatile char glob_tom, glob_harry, glob_will;   
                                            //Declaring global variables (initialized to 0 at start)    
int main(void){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	2e 97       	sbiw	r28, 0x0e	; 14
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	cd bf       	out	0x3d, r28	; 61
  uint8_t loc_tom = 5;                    //Declaring and initializing the variable to 5
  a4:	85 e0       	ldi	r24, 0x05	; 5
  a6:	89 83       	std	Y+1, r24	; 0x01
  uint8_t loc_harry = 300;                //Value of loc_harry will be 44!!!
  a8:	8c e2       	ldi	r24, 0x2C	; 44
  aa:	8a 83       	std	Y+2, r24	; 0x02
  //Multiply and modulo operators 
  uint8_t mult = loc_tom * 2;             //Value of mult will be 10
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	88 0f       	add	r24, r24
  b0:	8b 83       	std	Y+3, r24	; 0x03
  uint8_t modu = loc_tom % 10;            //Value of modu will be 5
  b2:	99 81       	ldd	r25, Y+1	; 0x01
  b4:	8d ec       	ldi	r24, 0xCD	; 205
  b6:	98 9f       	mul	r25, r24
  b8:	81 2d       	mov	r24, r1
  ba:	11 24       	eor	r1, r1
  bc:	86 95       	lsr	r24
  be:	86 95       	lsr	r24
  c0:	86 95       	lsr	r24
  c2:	88 0f       	add	r24, r24
  c4:	28 2f       	mov	r18, r24
  c6:	22 0f       	add	r18, r18
  c8:	22 0f       	add	r18, r18
  ca:	82 0f       	add	r24, r18
  cc:	29 2f       	mov	r18, r25
  ce:	28 1b       	sub	r18, r24
  d0:	82 2f       	mov	r24, r18
  d2:	8c 83       	std	Y+4, r24	; 0x04
  //Importance of type casting
  float bad_dev = loc_tom / 4;            //Value of bad_dev will be 1!!!
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	86 95       	lsr	r24
  d8:	86 95       	lsr	r24
  da:	88 2f       	mov	r24, r24
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	09 2e       	mov	r0, r25
  e0:	00 0c       	add	r0, r0
  e2:	aa 0b       	sbc	r26, r26
  e4:	bb 0b       	sbc	r27, r27
  e6:	bc 01       	movw	r22, r24
  e8:	cd 01       	movw	r24, r26
  ea:	0e 94 2c 01 	call	0x258	; 0x258 <__floatsisf>
  ee:	dc 01       	movw	r26, r24
  f0:	cb 01       	movw	r24, r22
  f2:	8d 83       	std	Y+5, r24	; 0x05
  f4:	9e 83       	std	Y+6, r25	; 0x06
  f6:	af 83       	std	Y+7, r26	; 0x07
  f8:	b8 87       	std	Y+8, r27	; 0x08
  float good_dev = (float)loc_tom / 4;    //Now good_dev will be 1.25
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	88 2f       	mov	r24, r24
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	a0 e0       	ldi	r26, 0x00	; 0
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	bc 01       	movw	r22, r24
 106:	cd 01       	movw	r24, r26
 108:	0e 94 2a 01 	call	0x254	; 0x254 <__floatunsisf>
 10c:	dc 01       	movw	r26, r24
 10e:	cb 01       	movw	r24, r22
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	40 e8       	ldi	r20, 0x80	; 128
 116:	50 e4       	ldi	r21, 0x40	; 64
 118:	bc 01       	movw	r22, r24
 11a:	cd 01       	movw	r24, r26
 11c:	0e 94 b8 00 	call	0x170	; 0x170 <__divsf3>
 120:	dc 01       	movw	r26, r24
 122:	cb 01       	movw	r24, r22
 124:	89 87       	std	Y+9, r24	; 0x09
 126:	9a 87       	std	Y+10, r25	; 0x0a
 128:	ab 87       	std	Y+11, r26	; 0x0b
 12a:	bc 87       	std	Y+12, r27	; 0x0c
  uint16_t reslt_is_16bit = (uint16_t)loc_tom * 100 + 100;
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9c 01       	movw	r18, r24
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	3f 4f       	sbci	r19, 0xFF	; 255
 138:	44 e6       	ldi	r20, 0x64	; 100
 13a:	42 9f       	mul	r20, r18
 13c:	c0 01       	movw	r24, r0
 13e:	43 9f       	mul	r20, r19
 140:	90 0d       	add	r25, r0
 142:	11 24       	eor	r1, r1
 144:	9e 87       	std	Y+14, r25	; 0x0e
 146:	8d 87       	std	Y+13, r24	; 0x0d
                                          //Upcasting loc_tom as (loc_tom * 100) > 255
  //Assigning characters, hex and binary values
  glob_tom = 'A';                         //Value of glob_tom will be 65
 148:	81 e4       	ldi	r24, 0x41	; 65
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  glob_harry = 0x41;                      //Value of glob_harry will be 65
 14e:	81 e4       	ldi	r24, 0x41	; 65
 150:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <glob_harry>
  glob_will = 0b01000001;                 //Value of glob_will will be 65
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <glob_will>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2e 96       	adiw	r28, 0x0e	; 14
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <__divsf3>:
 170:	0e 94 cc 00 	call	0x198	; 0x198 <__divsf3x>
 174:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__fp_round>
 178:	0e 94 77 01 	call	0x2ee	; 0x2ee <__fp_pscB>
 17c:	58 f0       	brcs	.+22     	; 0x194 <__divsf3+0x24>
 17e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__fp_pscA>
 182:	40 f0       	brcs	.+16     	; 0x194 <__divsf3+0x24>
 184:	29 f4       	brne	.+10     	; 0x190 <__divsf3+0x20>
 186:	5f 3f       	cpi	r21, 0xFF	; 255
 188:	29 f0       	breq	.+10     	; 0x194 <__divsf3+0x24>
 18a:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__fp_inf>
 18e:	51 11       	cpse	r21, r1
 190:	0c 94 b2 01 	jmp	0x364	; 0x364 <__fp_szero>
 194:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__fp_nan>

00000198 <__divsf3x>:
 198:	0e 94 8f 01 	call	0x31e	; 0x31e <__fp_split3>
 19c:	68 f3       	brcs	.-38     	; 0x178 <__divsf3+0x8>

0000019e <__divsf3_pse>:
 19e:	99 23       	and	r25, r25
 1a0:	b1 f3       	breq	.-20     	; 0x18e <__divsf3+0x1e>
 1a2:	55 23       	and	r21, r21
 1a4:	91 f3       	breq	.-28     	; 0x18a <__divsf3+0x1a>
 1a6:	95 1b       	sub	r25, r21
 1a8:	55 0b       	sbc	r21, r21
 1aa:	bb 27       	eor	r27, r27
 1ac:	aa 27       	eor	r26, r26
 1ae:	62 17       	cp	r22, r18
 1b0:	73 07       	cpc	r23, r19
 1b2:	84 07       	cpc	r24, r20
 1b4:	38 f0       	brcs	.+14     	; 0x1c4 <__divsf3_pse+0x26>
 1b6:	9f 5f       	subi	r25, 0xFF	; 255
 1b8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	44 1f       	adc	r20, r20
 1c0:	aa 1f       	adc	r26, r26
 1c2:	a9 f3       	breq	.-22     	; 0x1ae <__divsf3_pse+0x10>
 1c4:	35 d0       	rcall	.+106    	; 0x230 <__divsf3_pse+0x92>
 1c6:	0e 2e       	mov	r0, r30
 1c8:	3a f0       	brmi	.+14     	; 0x1d8 <__divsf3_pse+0x3a>
 1ca:	e0 e8       	ldi	r30, 0x80	; 128
 1cc:	32 d0       	rcall	.+100    	; 0x232 <__divsf3_pse+0x94>
 1ce:	91 50       	subi	r25, 0x01	; 1
 1d0:	50 40       	sbci	r21, 0x00	; 0
 1d2:	e6 95       	lsr	r30
 1d4:	00 1c       	adc	r0, r0
 1d6:	ca f7       	brpl	.-14     	; 0x1ca <__divsf3_pse+0x2c>
 1d8:	2b d0       	rcall	.+86     	; 0x230 <__divsf3_pse+0x92>
 1da:	fe 2f       	mov	r31, r30
 1dc:	29 d0       	rcall	.+82     	; 0x230 <__divsf3_pse+0x92>
 1de:	66 0f       	add	r22, r22
 1e0:	77 1f       	adc	r23, r23
 1e2:	88 1f       	adc	r24, r24
 1e4:	bb 1f       	adc	r27, r27
 1e6:	26 17       	cp	r18, r22
 1e8:	37 07       	cpc	r19, r23
 1ea:	48 07       	cpc	r20, r24
 1ec:	ab 07       	cpc	r26, r27
 1ee:	b0 e8       	ldi	r27, 0x80	; 128
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <__divsf3_pse+0x56>
 1f2:	bb 0b       	sbc	r27, r27
 1f4:	80 2d       	mov	r24, r0
 1f6:	bf 01       	movw	r22, r30
 1f8:	ff 27       	eor	r31, r31
 1fa:	93 58       	subi	r25, 0x83	; 131
 1fc:	5f 4f       	sbci	r21, 0xFF	; 255
 1fe:	3a f0       	brmi	.+14     	; 0x20e <__divsf3_pse+0x70>
 200:	9e 3f       	cpi	r25, 0xFE	; 254
 202:	51 05       	cpc	r21, r1
 204:	78 f0       	brcs	.+30     	; 0x224 <__divsf3_pse+0x86>
 206:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__fp_inf>
 20a:	0c 94 b2 01 	jmp	0x364	; 0x364 <__fp_szero>
 20e:	5f 3f       	cpi	r21, 0xFF	; 255
 210:	e4 f3       	brlt	.-8      	; 0x20a <__divsf3_pse+0x6c>
 212:	98 3e       	cpi	r25, 0xE8	; 232
 214:	d4 f3       	brlt	.-12     	; 0x20a <__divsf3_pse+0x6c>
 216:	86 95       	lsr	r24
 218:	77 95       	ror	r23
 21a:	67 95       	ror	r22
 21c:	b7 95       	ror	r27
 21e:	f7 95       	ror	r31
 220:	9f 5f       	subi	r25, 0xFF	; 255
 222:	c9 f7       	brne	.-14     	; 0x216 <__divsf3_pse+0x78>
 224:	88 0f       	add	r24, r24
 226:	91 1d       	adc	r25, r1
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	97 f9       	bld	r25, 7
 22e:	08 95       	ret
 230:	e1 e0       	ldi	r30, 0x01	; 1
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	88 1f       	adc	r24, r24
 238:	bb 1f       	adc	r27, r27
 23a:	62 17       	cp	r22, r18
 23c:	73 07       	cpc	r23, r19
 23e:	84 07       	cpc	r24, r20
 240:	ba 07       	cpc	r27, r26
 242:	20 f0       	brcs	.+8      	; 0x24c <__divsf3_pse+0xae>
 244:	62 1b       	sub	r22, r18
 246:	73 0b       	sbc	r23, r19
 248:	84 0b       	sbc	r24, r20
 24a:	ba 0b       	sbc	r27, r26
 24c:	ee 1f       	adc	r30, r30
 24e:	88 f7       	brcc	.-30     	; 0x232 <__divsf3_pse+0x94>
 250:	e0 95       	com	r30
 252:	08 95       	ret

00000254 <__floatunsisf>:
 254:	e8 94       	clt
 256:	09 c0       	rjmp	.+18     	; 0x26a <__floatsisf+0x12>

00000258 <__floatsisf>:
 258:	97 fb       	bst	r25, 7
 25a:	3e f4       	brtc	.+14     	; 0x26a <__floatsisf+0x12>
 25c:	90 95       	com	r25
 25e:	80 95       	com	r24
 260:	70 95       	com	r23
 262:	61 95       	neg	r22
 264:	7f 4f       	sbci	r23, 0xFF	; 255
 266:	8f 4f       	sbci	r24, 0xFF	; 255
 268:	9f 4f       	sbci	r25, 0xFF	; 255
 26a:	99 23       	and	r25, r25
 26c:	a9 f0       	breq	.+42     	; 0x298 <__floatsisf+0x40>
 26e:	f9 2f       	mov	r31, r25
 270:	96 e9       	ldi	r25, 0x96	; 150
 272:	bb 27       	eor	r27, r27
 274:	93 95       	inc	r25
 276:	f6 95       	lsr	r31
 278:	87 95       	ror	r24
 27a:	77 95       	ror	r23
 27c:	67 95       	ror	r22
 27e:	b7 95       	ror	r27
 280:	f1 11       	cpse	r31, r1
 282:	f8 cf       	rjmp	.-16     	; 0x274 <__floatsisf+0x1c>
 284:	fa f4       	brpl	.+62     	; 0x2c4 <__floatsisf+0x6c>
 286:	bb 0f       	add	r27, r27
 288:	11 f4       	brne	.+4      	; 0x28e <__floatsisf+0x36>
 28a:	60 ff       	sbrs	r22, 0
 28c:	1b c0       	rjmp	.+54     	; 0x2c4 <__floatsisf+0x6c>
 28e:	6f 5f       	subi	r22, 0xFF	; 255
 290:	7f 4f       	sbci	r23, 0xFF	; 255
 292:	8f 4f       	sbci	r24, 0xFF	; 255
 294:	9f 4f       	sbci	r25, 0xFF	; 255
 296:	16 c0       	rjmp	.+44     	; 0x2c4 <__floatsisf+0x6c>
 298:	88 23       	and	r24, r24
 29a:	11 f0       	breq	.+4      	; 0x2a0 <__floatsisf+0x48>
 29c:	96 e9       	ldi	r25, 0x96	; 150
 29e:	11 c0       	rjmp	.+34     	; 0x2c2 <__floatsisf+0x6a>
 2a0:	77 23       	and	r23, r23
 2a2:	21 f0       	breq	.+8      	; 0x2ac <__floatsisf+0x54>
 2a4:	9e e8       	ldi	r25, 0x8E	; 142
 2a6:	87 2f       	mov	r24, r23
 2a8:	76 2f       	mov	r23, r22
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <__floatsisf+0x5e>
 2ac:	66 23       	and	r22, r22
 2ae:	71 f0       	breq	.+28     	; 0x2cc <__floatsisf+0x74>
 2b0:	96 e8       	ldi	r25, 0x86	; 134
 2b2:	86 2f       	mov	r24, r22
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	2a f0       	brmi	.+10     	; 0x2c4 <__floatsisf+0x6c>
 2ba:	9a 95       	dec	r25
 2bc:	66 0f       	add	r22, r22
 2be:	77 1f       	adc	r23, r23
 2c0:	88 1f       	adc	r24, r24
 2c2:	da f7       	brpl	.-10     	; 0x2ba <__floatsisf+0x62>
 2c4:	88 0f       	add	r24, r24
 2c6:	96 95       	lsr	r25
 2c8:	87 95       	ror	r24
 2ca:	97 f9       	bld	r25, 7
 2cc:	08 95       	ret

000002ce <__fp_inf>:
 2ce:	97 f9       	bld	r25, 7
 2d0:	9f 67       	ori	r25, 0x7F	; 127
 2d2:	80 e8       	ldi	r24, 0x80	; 128
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	08 95       	ret

000002da <__fp_nan>:
 2da:	9f ef       	ldi	r25, 0xFF	; 255
 2dc:	80 ec       	ldi	r24, 0xC0	; 192
 2de:	08 95       	ret

000002e0 <__fp_pscA>:
 2e0:	00 24       	eor	r0, r0
 2e2:	0a 94       	dec	r0
 2e4:	16 16       	cp	r1, r22
 2e6:	17 06       	cpc	r1, r23
 2e8:	18 06       	cpc	r1, r24
 2ea:	09 06       	cpc	r0, r25
 2ec:	08 95       	ret

000002ee <__fp_pscB>:
 2ee:	00 24       	eor	r0, r0
 2f0:	0a 94       	dec	r0
 2f2:	12 16       	cp	r1, r18
 2f4:	13 06       	cpc	r1, r19
 2f6:	14 06       	cpc	r1, r20
 2f8:	05 06       	cpc	r0, r21
 2fa:	08 95       	ret

000002fc <__fp_round>:
 2fc:	09 2e       	mov	r0, r25
 2fe:	03 94       	inc	r0
 300:	00 0c       	add	r0, r0
 302:	11 f4       	brne	.+4      	; 0x308 <__fp_round+0xc>
 304:	88 23       	and	r24, r24
 306:	52 f0       	brmi	.+20     	; 0x31c <__fp_round+0x20>
 308:	bb 0f       	add	r27, r27
 30a:	40 f4       	brcc	.+16     	; 0x31c <__fp_round+0x20>
 30c:	bf 2b       	or	r27, r31
 30e:	11 f4       	brne	.+4      	; 0x314 <__fp_round+0x18>
 310:	60 ff       	sbrs	r22, 0
 312:	04 c0       	rjmp	.+8      	; 0x31c <__fp_round+0x20>
 314:	6f 5f       	subi	r22, 0xFF	; 255
 316:	7f 4f       	sbci	r23, 0xFF	; 255
 318:	8f 4f       	sbci	r24, 0xFF	; 255
 31a:	9f 4f       	sbci	r25, 0xFF	; 255
 31c:	08 95       	ret

0000031e <__fp_split3>:
 31e:	57 fd       	sbrc	r21, 7
 320:	90 58       	subi	r25, 0x80	; 128
 322:	44 0f       	add	r20, r20
 324:	55 1f       	adc	r21, r21
 326:	59 f0       	breq	.+22     	; 0x33e <__fp_splitA+0x10>
 328:	5f 3f       	cpi	r21, 0xFF	; 255
 32a:	71 f0       	breq	.+28     	; 0x348 <__fp_splitA+0x1a>
 32c:	47 95       	ror	r20

0000032e <__fp_splitA>:
 32e:	88 0f       	add	r24, r24
 330:	97 fb       	bst	r25, 7
 332:	99 1f       	adc	r25, r25
 334:	61 f0       	breq	.+24     	; 0x34e <__fp_splitA+0x20>
 336:	9f 3f       	cpi	r25, 0xFF	; 255
 338:	79 f0       	breq	.+30     	; 0x358 <__fp_splitA+0x2a>
 33a:	87 95       	ror	r24
 33c:	08 95       	ret
 33e:	12 16       	cp	r1, r18
 340:	13 06       	cpc	r1, r19
 342:	14 06       	cpc	r1, r20
 344:	55 1f       	adc	r21, r21
 346:	f2 cf       	rjmp	.-28     	; 0x32c <__fp_split3+0xe>
 348:	46 95       	lsr	r20
 34a:	f1 df       	rcall	.-30     	; 0x32e <__fp_splitA>
 34c:	08 c0       	rjmp	.+16     	; 0x35e <__fp_splitA+0x30>
 34e:	16 16       	cp	r1, r22
 350:	17 06       	cpc	r1, r23
 352:	18 06       	cpc	r1, r24
 354:	99 1f       	adc	r25, r25
 356:	f1 cf       	rjmp	.-30     	; 0x33a <__fp_splitA+0xc>
 358:	86 95       	lsr	r24
 35a:	71 05       	cpc	r23, r1
 35c:	61 05       	cpc	r22, r1
 35e:	08 94       	sec
 360:	08 95       	ret

00000362 <__fp_zero>:
 362:	e8 94       	clt

00000364 <__fp_szero>:
 364:	bb 27       	eor	r27, r27
 366:	66 27       	eor	r22, r22
 368:	77 27       	eor	r23, r23
 36a:	cb 01       	movw	r24, r22
 36c:	97 f9       	bld	r25, 7
 36e:	08 95       	ret

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
