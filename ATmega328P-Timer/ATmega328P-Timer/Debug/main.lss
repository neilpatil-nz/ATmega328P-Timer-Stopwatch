
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f0  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000655  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000481  00000000  00000000  000011b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003be  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001b23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	c4 00       	.word	0x00c4	; ????
  6a:	ca 00       	.word	0x00ca	; ????
  6c:	d0 00       	.word	0x00d0	; ????
  6e:	d6 00       	.word	0x00d6	; ????
  70:	dc 00       	.word	0x00dc	; ????
  72:	e2 00       	.word	0x00e2	; ????
  74:	e8 00       	.word	0x00e8	; ????
  76:	ee 00       	.word	0x00ee	; ????
  78:	f4 00       	.word	0x00f4	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_clear_bss>:
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a2 30       	cpi	r26, 0x02	; 2
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 98 00 	call	0x130	; 0x130 <main>
  9a:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <__vector_11>:
/***** Declare & initialise global variables *****/

uint8_t i =0;
uint16_t count = 0;
/***** Interrupt Service Routines *****/
 ISR(TIMER1_COMPA_vect){
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
	 count++;
  b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 }
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <num_zero>:
			_delay_ms(DEL_TIME);*/
    } //while end
} //main end
/***** Functions *****/
void num_zero(){
	PORTC = 0b0101111;
  d0:	8f e2       	ldi	r24, 0x2F	; 47
  d2:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	08 95       	ret

000000da <num_one>:
}
void num_one(){
	PORTC = 0b0000100;
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	08 95       	ret

000000e4 <num_two>:
}
void num_two(){
	PORTC = 0b111010;
  e4:	8a e3       	ldi	r24, 0x3A	; 58
  e6:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	08 95       	ret

000000ee <num_three>:
}
void num_three(){
	PORTC = 0b111100;
  ee:	8c e3       	ldi	r24, 0x3C	; 60
  f0:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	08 95       	ret

000000f8 <num_four>:
}
void num_four(){
	PORTC = 0b0010101;
  f8:	85 e1       	ldi	r24, 0x15	; 21
  fa:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	85 b9       	out	0x05, r24	; 5
 100:	08 95       	ret

00000102 <num_five>:
}
void num_five(){
	PORTC = 0b111101;
 102:	8d e3       	ldi	r24, 0x3D	; 61
 104:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b0;
 106:	15 b8       	out	0x05, r1	; 5
 108:	08 95       	ret

0000010a <num_six>:
}
void num_six(){
	PORTC = 0b111111;
 10a:	8f e3       	ldi	r24, 0x3F	; 63
 10c:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b0;
 10e:	15 b8       	out	0x05, r1	; 5
 110:	08 95       	ret

00000112 <num_seven>:
}
void num_seven(){
	PORTC = 0b100100;
 112:	84 e2       	ldi	r24, 0x24	; 36
 114:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b1;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	85 b9       	out	0x05, r24	; 5
 11a:	08 95       	ret

0000011c <num_eight>:
}
void num_eight(){
	PORTC = 0b111111;
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b1;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	85 b9       	out	0x05, r24	; 5
 124:	08 95       	ret

00000126 <num_nine>:
}
void num_nine(){
	PORTC = 0b110101;
 126:	85 e3       	ldi	r24, 0x35	; 53
 128:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	08 95       	ret

00000130 <main>:
int main(void) {
    /***** Initial hardware setups go here *****/

    /***** IO Hardware Config *****/
    // configure these pins as outputs
	DDRD |= (1 << PD6);
 130:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << PD5);
 132:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << PD4);
 134:	54 9a       	sbi	0x0a, 4	; 10
	DDRB |= (1 << PB1); //setup OC1A pin (B1) as output
 136:	21 9a       	sbi	0x04, 1	; 4

	/***** Timer Config *****/
	TCCR1B |= (1 << WGM12); // CTC mode
 138:	e1 e8       	ldi	r30, 0x81	; 129
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 60       	ori	r24, 0x08	; 8
 140:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1A0); // toggle OC1A (B1 )output on match
 142:	a0 e8       	ldi	r26, 0x80	; 128
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	8c 91       	ld	r24, X
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS12); // Prescaler /256
 14c:	80 81       	ld	r24, Z
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	80 83       	st	Z, r24
	OCR1A = 62499;
 152:	83 e2       	ldi	r24, 0x23	; 35
 154:	94 ef       	ldi	r25, 0xF4	; 244
 156:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 15a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 |= (1 << OCIE1A);
 15e:	ef e6       	ldi	r30, 0x6F	; 111
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	82 60       	ori	r24, 0x02	; 2
 166:	80 83       	st	Z, r24
	 
	DDRC = 0xff;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xff;
 16c:	84 b9       	out	0x04, r24	; 4
	sei(); 
 16e:	78 94       	sei
    /***** Loop code *****/
    while (1) {
		
		
		
		switch (count)
 170:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 174:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	e9 30       	cpi	r30, 0x09	; 9
 17c:	f1 05       	cpc	r31, r1
 17e:	d0 f5       	brcc	.+116    	; 0x1f4 <main+0xc4>
 180:	ec 5c       	subi	r30, 0xCC	; 204
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	0c 94 00 01 	jmp	0x200	; 0x200 <__tablejump2__>
		{
			case 1:
			num_one();
 188:	0e 94 6d 00 	call	0xda	; 0xda <num_one>
			CLR_LED_1;
 18c:	5e 98       	cbi	0x0b, 6	; 11
			SET_LED_2;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
			SET_LED_3;
 190:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 192:	ee cf       	rjmp	.-36     	; 0x170 <main+0x40>
			
			case 2:
			num_two();
 194:	0e 94 72 00 	call	0xe4	; 0xe4 <num_two>
			CLR_LED_1;
 198:	5e 98       	cbi	0x0b, 6	; 11
			SET_LED_2;
 19a:	5d 9a       	sbi	0x0b, 5	; 11
			SET_LED_3;
 19c:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 19e:	e8 cf       	rjmp	.-48     	; 0x170 <main+0x40>
			
			case 3:
			num_three();
 1a0:	0e 94 77 00 	call	0xee	; 0xee <num_three>
			CLR_LED_1;
 1a4:	5e 98       	cbi	0x0b, 6	; 11
			SET_LED_2;
 1a6:	5d 9a       	sbi	0x0b, 5	; 11
			SET_LED_3;
 1a8:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 1aa:	e2 cf       	rjmp	.-60     	; 0x170 <main+0x40>
			
			case 4:
			num_four();
 1ac:	0e 94 7c 00 	call	0xf8	; 0xf8 <num_four>
			CLR_LED_1;
 1b0:	5e 98       	cbi	0x0b, 6	; 11
			SET_LED_2;
 1b2:	5d 9a       	sbi	0x0b, 5	; 11
			SET_LED_3;
 1b4:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 1b6:	dc cf       	rjmp	.-72     	; 0x170 <main+0x40>
			
			case 5:
			num_five();
 1b8:	0e 94 81 00 	call	0x102	; 0x102 <num_five>
			CLR_LED_1;
 1bc:	5e 98       	cbi	0x0b, 6	; 11
			SET_LED_2;
 1be:	5d 9a       	sbi	0x0b, 5	; 11
			SET_LED_3;
 1c0:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 1c2:	d6 cf       	rjmp	.-84     	; 0x170 <main+0x40>
			
			case 6:
			num_six();
 1c4:	0e 94 85 00 	call	0x10a	; 0x10a <num_six>
			CLR_LED_1;
 1c8:	5e 98       	cbi	0x0b, 6	; 11
			SET_LED_2;
 1ca:	5d 9a       	sbi	0x0b, 5	; 11
			SET_LED_3;
 1cc:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 1ce:	d0 cf       	rjmp	.-96     	; 0x170 <main+0x40>
			
			case 7:
			num_seven();
 1d0:	0e 94 89 00 	call	0x112	; 0x112 <num_seven>
			CLR_LED_1;
 1d4:	5e 98       	cbi	0x0b, 6	; 11
			SET_LED_2;
 1d6:	5d 9a       	sbi	0x0b, 5	; 11
			SET_LED_3;
 1d8:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 1da:	ca cf       	rjmp	.-108    	; 0x170 <main+0x40>
			
			case 8:
			num_eight();
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <num_eight>
			CLR_LED_1;
 1e0:	5e 98       	cbi	0x0b, 6	; 11
			SET_LED_2;
 1e2:	5d 9a       	sbi	0x0b, 5	; 11
			SET_LED_3;
 1e4:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 1e6:	c4 cf       	rjmp	.-120    	; 0x170 <main+0x40>
			
			case 9:
			num_nine();
 1e8:	0e 94 93 00 	call	0x126	; 0x126 <num_nine>
			CLR_LED_1;
 1ec:	5e 98       	cbi	0x0b, 6	; 11
			SET_LED_2;
 1ee:	5d 9a       	sbi	0x0b, 5	; 11
			SET_LED_3;
 1f0:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 1f2:	be cf       	rjmp	.-132    	; 0x170 <main+0x40>
			
			default:
			num_zero();
 1f4:	0e 94 68 00 	call	0xd0	; 0xd0 <num_zero>
			CLR_LED_1;
 1f8:	5e 98       	cbi	0x0b, 6	; 11
			SET_LED_2;
 1fa:	5d 9a       	sbi	0x0b, 5	; 11
			SET_LED_3;
 1fc:	5c 9a       	sbi	0x0b, 4	; 11
 1fe:	b8 cf       	rjmp	.-144    	; 0x170 <main+0x40>

00000200 <__tablejump2__>:
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	05 90       	lpm	r0, Z+
 206:	f4 91       	lpm	r31, Z
 208:	e0 2d       	mov	r30, r0
 20a:	09 94       	ijmp

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
