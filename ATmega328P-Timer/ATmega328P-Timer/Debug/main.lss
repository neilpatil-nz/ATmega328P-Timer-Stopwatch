
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000358  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000003ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c7  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ff  00000000  00000000  00000ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053e  00000000  00000000  000015a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042a  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e4  00000000  00000000  00002006  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000021ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_11>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	ae 00       	.word	0x00ae	; ????
  6a:	b1 00       	.word	0x00b1	; ????
  6c:	b4 00       	.word	0x00b4	; ????
  6e:	b7 00       	.word	0x00b7	; ????
  70:	ba 00       	.word	0x00ba	; ????
  72:	bd 00       	.word	0x00bd	; ????
  74:	c0 00       	.word	0x00c0	; ????
  76:	c3 00       	.word	0x00c3	; ????
  78:	c6 00       	.word	0x00c6	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	e8 e5       	ldi	r30, 0x58	; 88
  8e:	f3 e0       	ldi	r31, 0x03	; 3
  90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	a2 30       	cpi	r26, 0x02	; 2
  98:	b1 07       	cpc	r27, r17
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	a2 e0       	ldi	r26, 0x02	; 2
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a3 30       	cpi	r26, 0x03	; 3
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  b0:	0c 94 aa 01 	jmp	0x354	; 0x354 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <__vector_11>:
uint8_t i =0;
uint16_t count = 300;
uint8_t alarm_state = 0;

/***** Interrupt Service Routines *****/
 ISR(TIMER1_COMPA_vect){
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
	 count++;
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 }
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <num_zero>:
		num_zero();
	}
}

void num_zero(){
	PORTC = 0b0101111;
  e6:	8f e2       	ldi	r24, 0x2F	; 47
  e8:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b11111;
  ea:	8f e1       	ldi	r24, 0x1F	; 31
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	08 95       	ret

000000f0 <num_one>:
}
void num_one(){
	PORTC = 0b0000100;
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b11111;
  f4:	8f e1       	ldi	r24, 0x1F	; 31
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	08 95       	ret

000000fa <num_two>:
}
void num_two(){
	PORTC = 0b111010;
  fa:	8a e3       	ldi	r24, 0x3A	; 58
  fc:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b11111;
  fe:	8f e1       	ldi	r24, 0x1F	; 31
 100:	85 b9       	out	0x05, r24	; 5
 102:	08 95       	ret

00000104 <num_three>:
}
void num_three(){
	PORTC = 0b111100;
 104:	8c e3       	ldi	r24, 0x3C	; 60
 106:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b11111;
 108:	8f e1       	ldi	r24, 0x1F	; 31
 10a:	85 b9       	out	0x05, r24	; 5
 10c:	08 95       	ret

0000010e <num_four>:
}
void num_four(){
	PORTC = 0b0010101;
 10e:	85 e1       	ldi	r24, 0x15	; 21
 110:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b11111;
 112:	8f e1       	ldi	r24, 0x1F	; 31
 114:	85 b9       	out	0x05, r24	; 5
 116:	08 95       	ret

00000118 <num_five>:
}
void num_five(){
	PORTC = 0b111101;
 118:	8d e3       	ldi	r24, 0x3D	; 61
 11a:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b11110;
 11c:	8e e1       	ldi	r24, 0x1E	; 30
 11e:	85 b9       	out	0x05, r24	; 5
 120:	08 95       	ret

00000122 <num_six>:
}
void num_six(){
	PORTC = 0b111111;
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b11110;
 126:	8e e1       	ldi	r24, 0x1E	; 30
 128:	85 b9       	out	0x05, r24	; 5
 12a:	08 95       	ret

0000012c <num_seven>:
}
void num_seven(){
	PORTC = 0b100100;
 12c:	84 e2       	ldi	r24, 0x24	; 36
 12e:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b11111;
 130:	8f e1       	ldi	r24, 0x1F	; 31
 132:	85 b9       	out	0x05, r24	; 5
 134:	08 95       	ret

00000136 <num_eight>:
}
void num_eight(){
	PORTC = 0b111111;
 136:	8f e3       	ldi	r24, 0x3F	; 63
 138:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b11111;
 13a:	8f e1       	ldi	r24, 0x1F	; 31
 13c:	85 b9       	out	0x05, r24	; 5
 13e:	08 95       	ret

00000140 <num_nine>:
}                                                                       
void num_nine(){
	PORTC = 0b110101;
 140:	85 e3       	ldi	r24, 0x35	; 53
 142:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b11111;
 144:	8f e1       	ldi	r24, 0x1F	; 31
 146:	85 b9       	out	0x05, r24	; 5
 148:	08 95       	ret

0000014a <call_num>:
		
    } //while end
} //main end
/***** Functions *****/
void call_num(uint16_t count_input){
	switch (count_input)
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	89 30       	cpi	r24, 0x09	; 9
 14e:	91 05       	cpc	r25, r1
 150:	00 f5       	brcc	.+64     	; 0x192 <call_num+0x48>
 152:	8c 5c       	subi	r24, 0xCC	; 204
 154:	9f 4f       	sbci	r25, 0xFF	; 255
 156:	fc 01       	movw	r30, r24
 158:	0c 94 95 01 	jmp	0x32a	; 0x32a <__tablejump2__>
	{
		case 1:
		num_one();
 15c:	0e 94 78 00 	call	0xf0	; 0xf0 <num_one>
		break;
 160:	08 95       	ret
		
		case 2:
		num_two();
 162:	0e 94 7d 00 	call	0xfa	; 0xfa <num_two>
		break;
 166:	08 95       	ret
		
		case 3:
		num_three();
 168:	0e 94 82 00 	call	0x104	; 0x104 <num_three>
		break;
 16c:	08 95       	ret
		
		case 4:
		num_four();
 16e:	0e 94 87 00 	call	0x10e	; 0x10e <num_four>
		break;
 172:	08 95       	ret
		
		case 5:
		num_five();
 174:	0e 94 8c 00 	call	0x118	; 0x118 <num_five>
		break;
 178:	08 95       	ret
		
		case 6:
		num_six();
 17a:	0e 94 91 00 	call	0x122	; 0x122 <num_six>
		break;
 17e:	08 95       	ret
		
		case 7:
		num_seven();
 180:	0e 94 96 00 	call	0x12c	; 0x12c <num_seven>
		break;
 184:	08 95       	ret
		
		case 8:
		num_eight();
 186:	0e 94 9b 00 	call	0x136	; 0x136 <num_eight>
		break;
 18a:	08 95       	ret
		
		case 9:
		num_nine();
 18c:	0e 94 a0 00 	call	0x140	; 0x140 <num_nine>
		break;
 190:	08 95       	ret
		
		default:
		num_zero();
 192:	0e 94 73 00 	call	0xe6	; 0xe6 <num_zero>
 196:	08 95       	ret

00000198 <main>:
int main(void) {
    /***** Initial hardware setups go here *****/

    /***** IO Hardware Config *****/
    // configure these pins as outputs
	DDRD |= (1 << PD7);
 198:	57 9a       	sbi	0x0a, 7	; 10
	DDRD |= (1 << PD6);
 19a:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << PD5);
 19c:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << PD4);
 19e:	54 9a       	sbi	0x0a, 4	; 10
	DDRD |= (1 << PD1);
 1a0:	51 9a       	sbi	0x0a, 1	; 10
	DDRB |= (1 << PB1); //setup OC1A pin (B1) as output
 1a2:	21 9a       	sbi	0x04, 1	; 4

	/***** Timer Config *****/
	TCCR1B |= (1 << WGM12); // CTC mode
 1a4:	e1 e8       	ldi	r30, 0x81	; 129
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	88 60       	ori	r24, 0x08	; 8
 1ac:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1A0); // toggle OC1A (B1 )output on match
 1ae:	a0 e8       	ldi	r26, 0x80	; 128
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	8c 91       	ld	r24, X
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS12); // Prescaler /256
 1b8:	80 81       	ld	r24, Z
 1ba:	84 60       	ori	r24, 0x04	; 4
 1bc:	80 83       	st	Z, r24
	OCR1A = 62499;
 1be:	83 e2       	ldi	r24, 0x23	; 35
 1c0:	94 ef       	ldi	r25, 0xF4	; 244
 1c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 |= (1 << OCIE1A);
 1ca:	ef e6       	ldi	r30, 0x6F	; 111
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	80 83       	st	Z, r24
	 
	DDRC = 0xff;
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xff;
 1d8:	84 b9       	out	0x04, r24	; 4
	sei(); 
 1da:	78 94       	sei

    /***** Loop code *****/
    while (1) {
		CLR_ALARM;
		if (count == 320){
			alarm_state = 1;
 1dc:	d1 e0       	ldi	r29, 0x01	; 1
		SET_LED_3;
		CLR_LED_4;
		
		
		_delay_ms(DEL_TIME);
		if ((count%60)/10 >= 6){
 1de:	cc e3       	ldi	r28, 0x3C	; 60

    /***** Run once code goes here *****/

    /***** Loop code *****/
    while (1) {
		CLR_ALARM;
 1e0:	59 98       	cbi	0x0b, 1	; 11
		if (count == 320){
 1e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1ea:	80 34       	cpi	r24, 0x40	; 64
 1ec:	91 40       	sbci	r25, 0x01	; 1
 1ee:	d1 f4       	brne	.+52     	; 0x224 <main+0x8c>
			alarm_state = 1;
 1f0:	d0 93 02 01 	sts	0x0102, r29	; 0x800102 <__data_end>
			while(alarm_state == 1){
				SET_ALARM;
 1f4:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	3f ef       	ldi	r19, 0xFF	; 255
 1f8:	81 ee       	ldi	r24, 0xE1	; 225
 1fa:	94 e0       	ldi	r25, 0x04	; 4
 1fc:	31 50       	subi	r19, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x64>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x6e>
 206:	00 00       	nop
				_delay_ms(ALARM_DEL_TIME);
				CLR_ALARM;
 208:	59 98       	cbi	0x0b, 1	; 11
 20a:	2f ef       	ldi	r18, 0xFF	; 255
 20c:	31 ee       	ldi	r19, 0xE1	; 225
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	21 50       	subi	r18, 0x01	; 1
 212:	30 40       	sbci	r19, 0x00	; 0
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <main+0x78>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x82>
 21a:	00 00       	nop
    /***** Loop code *****/
    while (1) {
		CLR_ALARM;
		if (count == 320){
			alarm_state = 1;
			while(alarm_state == 1){
 21c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	41 f3       	breq	.-48     	; 0x1f4 <main+0x5c>
 224:	8f e1       	ldi	r24, 0x1F	; 31
 226:	9e e4       	ldi	r25, 0x4E	; 78
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x90>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x96>
 22e:	00 00       	nop
				CLR_ALARM;
				_delay_ms(ALARM_DEL_TIME);
			}
		}
		_delay_ms(DEL_TIME);
		call_num(count/60);
 230:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 234:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 238:	a9 e8       	ldi	r26, 0x89	; 137
 23a:	b8 e8       	ldi	r27, 0x88	; 136
 23c:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 240:	96 95       	lsr	r25
 242:	87 95       	ror	r24
 244:	92 95       	swap	r25
 246:	82 95       	swap	r24
 248:	8f 70       	andi	r24, 0x0F	; 15
 24a:	89 27       	eor	r24, r25
 24c:	9f 70       	andi	r25, 0x0F	; 15
 24e:	89 27       	eor	r24, r25
 250:	0e 94 a5 00 	call	0x14a	; 0x14a <call_num>
		CLR_LED_1;
 254:	5e 9a       	sbi	0x0b, 6	; 11
		CLR_LED_2;
 256:	5d 9a       	sbi	0x0b, 5	; 11
		SET_LED_3;
 258:	5c 98       	cbi	0x0b, 4	; 11
		CLR_LED_4;
 25a:	5f 9a       	sbi	0x0b, 7	; 11
 25c:	8f e1       	ldi	r24, 0x1F	; 31
 25e:	9e e4       	ldi	r25, 0x4E	; 78
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <main+0xc8>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0xce>
 266:	00 00       	nop
		
		
		_delay_ms(DEL_TIME);
		if ((count%60)/10 >= 6){
 268:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 26c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 270:	9a 01       	movw	r18, r20
 272:	a9 e8       	ldi	r26, 0x89	; 137
 274:	b8 e8       	ldi	r27, 0x88	; 136
 276:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 27a:	96 95       	lsr	r25
 27c:	87 95       	ror	r24
 27e:	92 95       	swap	r25
 280:	82 95       	swap	r24
 282:	8f 70       	andi	r24, 0x0F	; 15
 284:	89 27       	eor	r24, r25
 286:	9f 70       	andi	r25, 0x0F	; 15
 288:	89 27       	eor	r24, r25
 28a:	c8 9f       	mul	r28, r24
 28c:	90 01       	movw	r18, r0
 28e:	c9 9f       	mul	r28, r25
 290:	30 0d       	add	r19, r0
 292:	11 24       	eor	r1, r1
 294:	ca 01       	movw	r24, r20
 296:	82 1b       	sub	r24, r18
 298:	93 0b       	sbc	r25, r19
 29a:	8c 33       	cpi	r24, 0x3C	; 60
 29c:	91 05       	cpc	r25, r1
 29e:	48 f0       	brcs	.+18     	; 0x2b2 <main+0x11a>
			call_num(0);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 a5 00 	call	0x14a	; 0x14a <call_num>
			CLR_LED_1;
 2a8:	5e 9a       	sbi	0x0b, 6	; 11
			SET_LED_2;
 2aa:	5d 98       	cbi	0x0b, 5	; 11
			CLR_LED_3;
 2ac:	5c 9a       	sbi	0x0b, 4	; 11
			CLR_LED_4;
 2ae:	5f 9a       	sbi	0x0b, 7	; 11
 2b0:	11 c0       	rjmp	.+34     	; 0x2d4 <main+0x13c>
		}
		else {
			call_num((count%60)/10);
 2b2:	9c 01       	movw	r18, r24
 2b4:	ad ec       	ldi	r26, 0xCD	; 205
 2b6:	bc ec       	ldi	r27, 0xCC	; 204
 2b8:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 2bc:	96 95       	lsr	r25
 2be:	87 95       	ror	r24
 2c0:	96 95       	lsr	r25
 2c2:	87 95       	ror	r24
 2c4:	96 95       	lsr	r25
 2c6:	87 95       	ror	r24
 2c8:	0e 94 a5 00 	call	0x14a	; 0x14a <call_num>
			CLR_LED_1;
 2cc:	5e 9a       	sbi	0x0b, 6	; 11
			SET_LED_2;
 2ce:	5d 98       	cbi	0x0b, 5	; 11
			CLR_LED_3;
 2d0:	5c 9a       	sbi	0x0b, 4	; 11
			CLR_LED_4;
 2d2:	5f 9a       	sbi	0x0b, 7	; 11
 2d4:	8f e1       	ldi	r24, 0x1F	; 31
 2d6:	9e e4       	ldi	r25, 0x4E	; 78
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x140>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x146>
 2de:	00 00       	nop
		}
		
	
		_delay_ms(DEL_TIME);
		call_num(count%10);
 2e0:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 2e4:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 2e8:	9a 01       	movw	r18, r20
 2ea:	ad ec       	ldi	r26, 0xCD	; 205
 2ec:	bc ec       	ldi	r27, 0xCC	; 204
 2ee:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 2f2:	96 95       	lsr	r25
 2f4:	87 95       	ror	r24
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	9c 01       	movw	r18, r24
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	82 0f       	add	r24, r18
 312:	93 1f       	adc	r25, r19
 314:	9a 01       	movw	r18, r20
 316:	28 1b       	sub	r18, r24
 318:	39 0b       	sbc	r19, r25
 31a:	c9 01       	movw	r24, r18
 31c:	0e 94 a5 00 	call	0x14a	; 0x14a <call_num>
		SET_LED_1;
 320:	5e 98       	cbi	0x0b, 6	; 11
		CLR_LED_2;
 322:	5d 9a       	sbi	0x0b, 5	; 11
		CLR_LED_3;
 324:	5c 9a       	sbi	0x0b, 4	; 11
		CLR_LED_4;
 326:	5f 9a       	sbi	0x0b, 7	; 11
		
    } //while end
 328:	5b cf       	rjmp	.-330    	; 0x1e0 <main+0x48>

0000032a <__tablejump2__>:
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	05 90       	lpm	r0, Z+
 330:	f4 91       	lpm	r31, Z
 332:	e0 2d       	mov	r30, r0
 334:	09 94       	ijmp

00000336 <__umulhisi3>:
 336:	a2 9f       	mul	r26, r18
 338:	b0 01       	movw	r22, r0
 33a:	b3 9f       	mul	r27, r19
 33c:	c0 01       	movw	r24, r0
 33e:	a3 9f       	mul	r26, r19
 340:	70 0d       	add	r23, r0
 342:	81 1d       	adc	r24, r1
 344:	11 24       	eor	r1, r1
 346:	91 1d       	adc	r25, r1
 348:	b2 9f       	mul	r27, r18
 34a:	70 0d       	add	r23, r0
 34c:	81 1d       	adc	r24, r1
 34e:	11 24       	eor	r1, r1
 350:	91 1d       	adc	r25, r1
 352:	08 95       	ret

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
